/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RemixParent } from './RemixParent';
import {
    RemixParentFromJSON,
    RemixParentFromJSONTyped,
    RemixParentToJSON,
} from './RemixParent';
import type { TrackArtwork } from './TrackArtwork';
import {
    TrackArtworkFromJSON,
    TrackArtworkFromJSONTyped,
    TrackArtworkToJSON,
} from './TrackArtwork';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Track
 */
export interface Track {
    /**
     * 
     * @type {TrackArtwork}
     * @memberof Track
     */
    artwork?: TrackArtwork;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    genre?: string;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    trackCid?: string;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    previewCid?: string;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    mood?: string;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    releaseDate?: string;
    /**
     * 
     * @type {RemixParent}
     * @memberof Track
     */
    remixOf?: RemixParent;
    /**
     * 
     * @type {number}
     * @memberof Track
     */
    repostCount: number;
    /**
     * 
     * @type {number}
     * @memberof Track
     */
    favoriteCount: number;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    tags?: string;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    title: string;
    /**
     * 
     * @type {User}
     * @memberof Track
     */
    user: User;
    /**
     * 
     * @type {number}
     * @memberof Track
     */
    duration: number;
    /**
     * 
     * @type {boolean}
     * @memberof Track
     */
    downloadable?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Track
     */
    playCount: number;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    permalink?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Track
     */
    isStreamable?: boolean;
}

/**
 * Check if a given object implements the Track interface.
 */
export function instanceOfTrack(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "repostCount" in value;
    isInstance = isInstance && "favoriteCount" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "duration" in value;
    isInstance = isInstance && "playCount" in value;

    return isInstance;
}

export function TrackFromJSON(json: any): Track {
    return TrackFromJSONTyped(json, false);
}

export function TrackFromJSONTyped(json: any, ignoreDiscriminator: boolean): Track {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'artwork': !exists(json, 'artwork') ? undefined : TrackArtworkFromJSON(json['artwork']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'genre': !exists(json, 'genre') ? undefined : json['genre'],
        'id': json['id'],
        'trackCid': !exists(json, 'track_cid') ? undefined : json['track_cid'],
        'previewCid': !exists(json, 'preview_cid') ? undefined : json['preview_cid'],
        'mood': !exists(json, 'mood') ? undefined : json['mood'],
        'releaseDate': !exists(json, 'release_date') ? undefined : json['release_date'],
        'remixOf': !exists(json, 'remix_of') ? undefined : RemixParentFromJSON(json['remix_of']),
        'repostCount': json['repost_count'],
        'favoriteCount': json['favorite_count'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'title': json['title'],
        'user': UserFromJSON(json['user']),
        'duration': json['duration'],
        'downloadable': !exists(json, 'downloadable') ? undefined : json['downloadable'],
        'playCount': json['play_count'],
        'permalink': !exists(json, 'permalink') ? undefined : json['permalink'],
        'isStreamable': !exists(json, 'is_streamable') ? undefined : json['is_streamable'],
    };
}

export function TrackToJSON(value?: Track | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'artwork': TrackArtworkToJSON(value.artwork),
        'description': value.description,
        'genre': value.genre,
        'id': value.id,
        'track_cid': value.trackCid,
        'preview_cid': value.previewCid,
        'mood': value.mood,
        'release_date': value.releaseDate,
        'remix_of': RemixParentToJSON(value.remixOf),
        'repost_count': value.repostCount,
        'favorite_count': value.favoriteCount,
        'tags': value.tags,
        'title': value.title,
        'user': UserToJSON(value.user),
        'duration': value.duration,
        'downloadable': value.downloadable,
        'play_count': value.playCount,
        'permalink': value.permalink,
        'is_streamable': value.isStreamable,
    };
}

