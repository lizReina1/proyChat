import { Base, BaseConstructorArgs } from './base';
export declare class Playlists extends Base {
    constructor(...args: BaseConstructorArgs);
    /**
     * get full playlist objects, including tracks, for passed in array of playlistId
     * @param limit max # of items to return
     * @param offset offset into list to return from (for pagination)
     * @param idsArray list of playlist ids
     * @param targetUserId the user whose playlists we're trying to get
     * @param withUsers whether to return users nested within the collection objects
     * @returns array of playlist objects
     * additional metadata fields on playlist objects:
     *  {Integer} repost_count - repost count for given playlist
     *  {Integer} save_count - save count for given playlist
     *  {Boolean} has_current_user_reposted - has current user reposted given playlist
     *  {Array} followee_reposts - followees of current user that have reposted given playlist
     *  {Boolean} has_current_user_reposted - has current user reposted given playlist
     *  {Boolean} has_current_user_saved - has current user saved given playlist
     */
    getPlaylists(limit?: number, offset?: number, idsArray?: null, targetUserId?: null, withUsers?: boolean): Promise<import("../utils").CollectionMetadata[] | null | undefined>;
    /**
     * Return saved playlists for current user
     * NOTE in returned JSON, SaveType string one of track, playlist, album
     * @param limit - max # of items to return
     * @param offset - offset into list to return from (for pagination)
     */
    getSavedPlaylists(limit?: number, offset?: number, withUsers?: boolean): Promise<unknown>;
    /**
     * Return saved albums for current user
     * NOTE in returned JSON, SaveType string one of track, playlist, album
     * @param limit - max # of items to return
     * @param offset - offset into list to return from (for pagination)
     */
    getSavedAlbums(limit?: number, offset?: number, withUsers?: boolean): Promise<unknown>;
}
