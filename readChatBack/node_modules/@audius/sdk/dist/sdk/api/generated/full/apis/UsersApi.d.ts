/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CollectionLibraryResponseFull, FollowingResponseFull, FullBulkSubscribersResponse, FullFollowersResponse, FullGetSupporter, FullGetSupporters, FullGetSupporting, FullReposts, FullSubscribersResponse, FullTracks, FullUserResponse, HistoryResponseFull, RelatedArtistResponseFull, TopGenreUsersResponseFull, TopUsersResponseFull, TrackLibraryResponseFull, UsersByContentNode } from '../models';
export interface BulkGetSubscribersRequest {
    ids: Array<string>;
}
export interface BulkGetSubscribersViaJSONRequestRequest {
    ids: Array<string>;
}
export interface GetAIAttributedTracksByUserHandleRequest {
    handle: string;
    offset?: number;
    limit?: number;
    userId?: string;
    sort?: GetAIAttributedTracksByUserHandleSortEnum;
    query?: string;
    sortMethod?: GetAIAttributedTracksByUserHandleSortMethodEnum;
    sortDirection?: GetAIAttributedTracksByUserHandleSortDirectionEnum;
    filterTracks?: GetAIAttributedTracksByUserHandleFilterTracksEnum;
}
export interface GetFavoritesRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
    query?: string;
    sortMethod?: GetFavoritesSortMethodEnum;
    sortDirection?: GetFavoritesSortDirectionEnum;
}
export interface GetFollowersRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
}
export interface GetFollowingRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
}
export interface GetPurchasesRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
    sortMethod?: GetPurchasesSortMethodEnum;
    sortDirection?: GetPurchasesSortDirectionEnum;
}
export interface GetRelatedUsersRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
}
export interface GetRepostsRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
}
export interface GetRepostsByHandleRequest {
    handle: string;
    offset?: number;
    limit?: number;
    userId?: string;
}
export interface GetSalesRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
    sortMethod?: GetSalesSortMethodEnum;
    sortDirection?: GetSalesSortDirectionEnum;
}
export interface GetSubscribersRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
}
export interface GetSupporterRequest {
    id: string;
    supporterUserId: string;
    userId?: string;
}
export interface GetSupportersRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
}
export interface GetSupportingRequest {
    id: string;
    supportedUserId: string;
    userId?: string;
}
export interface GetSupportingsRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
}
export interface GetTopUsersRequest {
    offset?: number;
    limit?: number;
    userId?: string;
}
export interface GetTopUsersInGenreRequest {
    offset?: number;
    limit?: number;
    genre?: Array<string>;
}
export interface GetTracksByUserRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
    sort?: GetTracksByUserSortEnum;
    query?: string;
    sortMethod?: GetTracksByUserSortMethodEnum;
    sortDirection?: GetTracksByUserSortDirectionEnum;
    filterTracks?: GetTracksByUserFilterTracksEnum;
}
export interface GetTracksByUserHandleRequest {
    handle: string;
    offset?: number;
    limit?: number;
    userId?: string;
    sort?: GetTracksByUserHandleSortEnum;
    query?: string;
    sortMethod?: GetTracksByUserHandleSortMethodEnum;
    sortDirection?: GetTracksByUserHandleSortDirectionEnum;
    filterTracks?: GetTracksByUserHandleFilterTracksEnum;
}
export interface GetUserRequest {
    id: string;
    userId?: string;
}
export interface GetUserByHandleRequest {
    handle: string;
    userId?: string;
}
export interface GetUserLibraryAlbumsRequest {
    id: string;
    encodedDataMessage: string;
    encodedDataSignature: string;
    offset?: number;
    limit?: number;
    userId?: string;
    query?: string;
    sortDirection?: GetUserLibraryAlbumsSortDirectionEnum;
    type?: GetUserLibraryAlbumsTypeEnum;
    sortMethod?: GetUserLibraryAlbumsSortMethodEnum;
}
export interface GetUserLibraryPlaylistsRequest {
    id: string;
    encodedDataMessage: string;
    encodedDataSignature: string;
    offset?: number;
    limit?: number;
    userId?: string;
    query?: string;
    sortDirection?: GetUserLibraryPlaylistsSortDirectionEnum;
    type?: GetUserLibraryPlaylistsTypeEnum;
    sortMethod?: GetUserLibraryPlaylistsSortMethodEnum;
}
export interface GetUserLibraryTracksRequest {
    id: string;
    encodedDataMessage: string;
    encodedDataSignature: string;
    offset?: number;
    limit?: number;
    userId?: string;
    query?: string;
    sortMethod?: GetUserLibraryTracksSortMethodEnum;
    sortDirection?: GetUserLibraryTracksSortDirectionEnum;
    type?: GetUserLibraryTracksTypeEnum;
}
export interface GetUserReplicaSetRequest {
    id: string;
    userId?: string;
}
export interface GetUsersTrackHistoryRequest {
    id: string;
    offset?: number;
    limit?: number;
    userId?: string;
    query?: string;
    sortMethod?: GetUsersTrackHistorySortMethodEnum;
    sortDirection?: GetUsersTrackHistorySortDirectionEnum;
}
/**
 *
 */
export declare class UsersApi extends runtime.BaseAPI {
    /** @hidden
     * All users that subscribe to the provided users
     */
    bulkGetSubscribersRaw(params: BulkGetSubscribersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullBulkSubscribersResponse>>;
    /**
     * All users that subscribe to the provided users
     */
    bulkGetSubscribers(params: BulkGetSubscribersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullBulkSubscribersResponse>;
    /** @hidden
     * Get all users that subscribe to the users listed in the JSON request
     */
    bulkGetSubscribersViaJSONRequestRaw(params: BulkGetSubscribersViaJSONRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullBulkSubscribersResponse>>;
    /**
     * Get all users that subscribe to the users listed in the JSON request
     */
    bulkGetSubscribersViaJSONRequest(params: BulkGetSubscribersViaJSONRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullBulkSubscribersResponse>;
    /** @hidden
     * Gets the AI generated tracks attributed to a user using the user\'s handle
     */
    getAIAttributedTracksByUserHandleRaw(params: GetAIAttributedTracksByUserHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracks>>;
    /**
     * Gets the AI generated tracks attributed to a user using the user\'s handle
     */
    getAIAttributedTracksByUserHandle(params: GetAIAttributedTracksByUserHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracks>;
    /** @hidden
     * Gets a user\'s favorite tracks
     */
    getFavoritesRaw(params: GetFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackLibraryResponseFull>>;
    /**
     * Gets a user\'s favorite tracks
     */
    getFavorites(params: GetFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackLibraryResponseFull>;
    /** @hidden
     * All users that follow the provided user
     */
    getFollowersRaw(params: GetFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullFollowersResponse>>;
    /**
     * All users that follow the provided user
     */
    getFollowers(params: GetFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullFollowersResponse>;
    /** @hidden
     * All users that the provided user follows
     */
    getFollowingRaw(params: GetFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FollowingResponseFull>>;
    /**
     * All users that the provided user follows
     */
    getFollowing(params: GetFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FollowingResponseFull>;
    /** @hidden
     * Gets the purchases the user has made
     */
    getPurchasesRaw(params: GetPurchasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Gets the purchases the user has made
     */
    getPurchases(params: GetPurchasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /** @hidden
     * Gets a list of users that might be of interest to followers of this user.
     */
    getRelatedUsersRaw(params: GetRelatedUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelatedArtistResponseFull>>;
    /**
     * Gets a list of users that might be of interest to followers of this user.
     */
    getRelatedUsers(params: GetRelatedUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelatedArtistResponseFull>;
    /** @hidden
     * Gets the given user\'s reposts
     */
    getRepostsRaw(params: GetRepostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullReposts>>;
    /**
     * Gets the given user\'s reposts
     */
    getReposts(params: GetRepostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullReposts>;
    /** @hidden
     * Gets the user\'s reposts by the user handle
     */
    getRepostsByHandleRaw(params: GetRepostsByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullReposts>>;
    /**
     * Gets the user\'s reposts by the user handle
     */
    getRepostsByHandle(params: GetRepostsByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullReposts>;
    /** @hidden
     * Gets the sales the user has made
     */
    getSalesRaw(params: GetSalesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Gets the sales the user has made
     */
    getSales(params: GetSalesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /** @hidden
     * All users that subscribe to the provided user
     */
    getSubscribersRaw(params: GetSubscribersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullSubscribersResponse>>;
    /**
     * All users that subscribe to the provided user
     */
    getSubscribers(params: GetSubscribersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullSubscribersResponse>;
    /** @hidden
     * Gets the specified supporter of the given user
     */
    getSupporterRaw(params: GetSupporterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullGetSupporter>>;
    /**
     * Gets the specified supporter of the given user
     */
    getSupporter(params: GetSupporterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullGetSupporter>;
    /** @hidden
     * Gets the supporters of the given user
     */
    getSupportersRaw(params: GetSupportersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullGetSupporters>>;
    /**
     * Gets the supporters of the given user
     */
    getSupporters(params: GetSupportersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullGetSupporters>;
    /** @hidden
     * Gets the support from the given user to the supported user
     */
    getSupportingRaw(params: GetSupportingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullGetSupporting>>;
    /**
     * Gets the support from the given user to the supported user
     */
    getSupporting(params: GetSupportingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullGetSupporting>;
    /** @hidden
     * Gets the users that the given user supports
     */
    getSupportingsRaw(params: GetSupportingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullGetSupporting>>;
    /**
     * Gets the users that the given user supports
     */
    getSupportings(params: GetSupportingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullGetSupporting>;
    /** @hidden
     * Get the Top Users having at least one track by follower count
     */
    getTopUsersRaw(params: GetTopUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TopUsersResponseFull>>;
    /**
     * Get the Top Users having at least one track by follower count
     */
    getTopUsers(params?: GetTopUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TopUsersResponseFull>;
    /** @hidden
     * Get the Top Users for a Given Genre
     */
    getTopUsersInGenreRaw(params: GetTopUsersInGenreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TopGenreUsersResponseFull>>;
    /**
     * Get the Top Users for a Given Genre
     */
    getTopUsersInGenre(params?: GetTopUsersInGenreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TopGenreUsersResponseFull>;
    /** @hidden
     * Gets the tracks created by a user using their user ID
     */
    getTracksByUserRaw(params: GetTracksByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracks>>;
    /**
     * Gets the tracks created by a user using their user ID
     */
    getTracksByUser(params: GetTracksByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracks>;
    /** @hidden
     * Gets the tracks created by a user using the user\'s handle
     */
    getTracksByUserHandleRaw(params: GetTracksByUserHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracks>>;
    /**
     * Gets the tracks created by a user using the user\'s handle
     */
    getTracksByUserHandle(params: GetTracksByUserHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracks>;
    /** @hidden
     * Gets a single user by their user ID
     */
    getUserRaw(params: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullUserResponse>>;
    /**
     * Gets a single user by their user ID
     */
    getUser(params: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullUserResponse>;
    /** @hidden
     * Gets a single user by their handle
     */
    getUserByHandleRaw(params: GetUserByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullUserResponse>>;
    /**
     * Gets a single user by their handle
     */
    getUserByHandle(params: GetUserByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullUserResponse>;
    /** @hidden
     * Gets a user\'s saved/reposted/purchased/all albums
     * Fetch a user\'s full library playlists
     */
    getUserLibraryAlbumsRaw(params: GetUserLibraryAlbumsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionLibraryResponseFull>>;
    /**
     * Gets a user\'s saved/reposted/purchased/all albums
     * Fetch a user\'s full library playlists
     */
    getUserLibraryAlbums(params: GetUserLibraryAlbumsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionLibraryResponseFull>;
    /** @hidden
     * Gets a user\'s saved/reposted/purchased/all playlists
     * Fetch a user\'s full library playlists
     */
    getUserLibraryPlaylistsRaw(params: GetUserLibraryPlaylistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionLibraryResponseFull>>;
    /**
     * Gets a user\'s saved/reposted/purchased/all playlists
     * Fetch a user\'s full library playlists
     */
    getUserLibraryPlaylists(params: GetUserLibraryPlaylistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionLibraryResponseFull>;
    /** @hidden
     * Gets a user\'s saved/reposted/purchased/all tracks
     * Fetch a user\'s full library tracks
     */
    getUserLibraryTracksRaw(params: GetUserLibraryTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackLibraryResponseFull>>;
    /**
     * Gets a user\'s saved/reposted/purchased/all tracks
     * Fetch a user\'s full library tracks
     */
    getUserLibraryTracks(params: GetUserLibraryTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackLibraryResponseFull>;
    /** @hidden
     * Gets the user\'s replica set
     */
    getUserReplicaSetRaw(params: GetUserReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersByContentNode>>;
    /**
     * Gets the user\'s replica set
     */
    getUserReplicaSet(params: GetUserReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersByContentNode>;
    /** @hidden
     * Get the tracks the user recently listened to.
     */
    getUsersTrackHistoryRaw(params: GetUsersTrackHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HistoryResponseFull>>;
    /**
     * Get the tracks the user recently listened to.
     */
    getUsersTrackHistory(params: GetUsersTrackHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HistoryResponseFull>;
}
/**
 * @export
 */
export declare const GetAIAttributedTracksByUserHandleSortEnum: {
    readonly Date: "date";
    readonly Plays: "plays";
};
export declare type GetAIAttributedTracksByUserHandleSortEnum = typeof GetAIAttributedTracksByUserHandleSortEnum[keyof typeof GetAIAttributedTracksByUserHandleSortEnum];
/**
 * @export
 */
export declare const GetAIAttributedTracksByUserHandleSortMethodEnum: {
    readonly Title: "title";
    readonly ArtistName: "artist_name";
    readonly ReleaseDate: "release_date";
    readonly LastListenDate: "last_listen_date";
    readonly AddedDate: "added_date";
    readonly Plays: "plays";
    readonly Reposts: "reposts";
    readonly Saves: "saves";
    readonly MostListensByUser: "most_listens_by_user";
};
export declare type GetAIAttributedTracksByUserHandleSortMethodEnum = typeof GetAIAttributedTracksByUserHandleSortMethodEnum[keyof typeof GetAIAttributedTracksByUserHandleSortMethodEnum];
/**
 * @export
 */
export declare const GetAIAttributedTracksByUserHandleSortDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export declare type GetAIAttributedTracksByUserHandleSortDirectionEnum = typeof GetAIAttributedTracksByUserHandleSortDirectionEnum[keyof typeof GetAIAttributedTracksByUserHandleSortDirectionEnum];
/**
 * @export
 */
export declare const GetAIAttributedTracksByUserHandleFilterTracksEnum: {
    readonly All: "all";
    readonly Public: "public";
    readonly Unlisted: "unlisted";
};
export declare type GetAIAttributedTracksByUserHandleFilterTracksEnum = typeof GetAIAttributedTracksByUserHandleFilterTracksEnum[keyof typeof GetAIAttributedTracksByUserHandleFilterTracksEnum];
/**
 * @export
 */
export declare const GetFavoritesSortMethodEnum: {
    readonly Title: "title";
    readonly ArtistName: "artist_name";
    readonly ReleaseDate: "release_date";
    readonly LastListenDate: "last_listen_date";
    readonly AddedDate: "added_date";
    readonly Plays: "plays";
    readonly Reposts: "reposts";
    readonly Saves: "saves";
    readonly MostListensByUser: "most_listens_by_user";
};
export declare type GetFavoritesSortMethodEnum = typeof GetFavoritesSortMethodEnum[keyof typeof GetFavoritesSortMethodEnum];
/**
 * @export
 */
export declare const GetFavoritesSortDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export declare type GetFavoritesSortDirectionEnum = typeof GetFavoritesSortDirectionEnum[keyof typeof GetFavoritesSortDirectionEnum];
/**
 * @export
 */
export declare const GetPurchasesSortMethodEnum: {
    readonly ContentTitle: "content_title";
    readonly ArtistName: "artist_name";
    readonly Date: "date";
};
export declare type GetPurchasesSortMethodEnum = typeof GetPurchasesSortMethodEnum[keyof typeof GetPurchasesSortMethodEnum];
/**
 * @export
 */
export declare const GetPurchasesSortDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export declare type GetPurchasesSortDirectionEnum = typeof GetPurchasesSortDirectionEnum[keyof typeof GetPurchasesSortDirectionEnum];
/**
 * @export
 */
export declare const GetSalesSortMethodEnum: {
    readonly ContentTitle: "content_title";
    readonly ArtistName: "artist_name";
    readonly Date: "date";
};
export declare type GetSalesSortMethodEnum = typeof GetSalesSortMethodEnum[keyof typeof GetSalesSortMethodEnum];
/**
 * @export
 */
export declare const GetSalesSortDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export declare type GetSalesSortDirectionEnum = typeof GetSalesSortDirectionEnum[keyof typeof GetSalesSortDirectionEnum];
/**
 * @export
 */
export declare const GetTracksByUserSortEnum: {
    readonly Date: "date";
    readonly Plays: "plays";
};
export declare type GetTracksByUserSortEnum = typeof GetTracksByUserSortEnum[keyof typeof GetTracksByUserSortEnum];
/**
 * @export
 */
export declare const GetTracksByUserSortMethodEnum: {
    readonly Title: "title";
    readonly ArtistName: "artist_name";
    readonly ReleaseDate: "release_date";
    readonly LastListenDate: "last_listen_date";
    readonly AddedDate: "added_date";
    readonly Plays: "plays";
    readonly Reposts: "reposts";
    readonly Saves: "saves";
    readonly MostListensByUser: "most_listens_by_user";
};
export declare type GetTracksByUserSortMethodEnum = typeof GetTracksByUserSortMethodEnum[keyof typeof GetTracksByUserSortMethodEnum];
/**
 * @export
 */
export declare const GetTracksByUserSortDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export declare type GetTracksByUserSortDirectionEnum = typeof GetTracksByUserSortDirectionEnum[keyof typeof GetTracksByUserSortDirectionEnum];
/**
 * @export
 */
export declare const GetTracksByUserFilterTracksEnum: {
    readonly All: "all";
    readonly Public: "public";
    readonly Unlisted: "unlisted";
};
export declare type GetTracksByUserFilterTracksEnum = typeof GetTracksByUserFilterTracksEnum[keyof typeof GetTracksByUserFilterTracksEnum];
/**
 * @export
 */
export declare const GetTracksByUserHandleSortEnum: {
    readonly Date: "date";
    readonly Plays: "plays";
};
export declare type GetTracksByUserHandleSortEnum = typeof GetTracksByUserHandleSortEnum[keyof typeof GetTracksByUserHandleSortEnum];
/**
 * @export
 */
export declare const GetTracksByUserHandleSortMethodEnum: {
    readonly Title: "title";
    readonly ArtistName: "artist_name";
    readonly ReleaseDate: "release_date";
    readonly LastListenDate: "last_listen_date";
    readonly AddedDate: "added_date";
    readonly Plays: "plays";
    readonly Reposts: "reposts";
    readonly Saves: "saves";
    readonly MostListensByUser: "most_listens_by_user";
};
export declare type GetTracksByUserHandleSortMethodEnum = typeof GetTracksByUserHandleSortMethodEnum[keyof typeof GetTracksByUserHandleSortMethodEnum];
/**
 * @export
 */
export declare const GetTracksByUserHandleSortDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export declare type GetTracksByUserHandleSortDirectionEnum = typeof GetTracksByUserHandleSortDirectionEnum[keyof typeof GetTracksByUserHandleSortDirectionEnum];
/**
 * @export
 */
export declare const GetTracksByUserHandleFilterTracksEnum: {
    readonly All: "all";
    readonly Public: "public";
    readonly Unlisted: "unlisted";
};
export declare type GetTracksByUserHandleFilterTracksEnum = typeof GetTracksByUserHandleFilterTracksEnum[keyof typeof GetTracksByUserHandleFilterTracksEnum];
/**
 * @export
 */
export declare const GetUserLibraryAlbumsSortDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export declare type GetUserLibraryAlbumsSortDirectionEnum = typeof GetUserLibraryAlbumsSortDirectionEnum[keyof typeof GetUserLibraryAlbumsSortDirectionEnum];
/**
 * @export
 */
export declare const GetUserLibraryAlbumsTypeEnum: {
    readonly All: "all";
    readonly Repost: "repost";
    readonly Favorite: "favorite";
    readonly Purchase: "purchase";
};
export declare type GetUserLibraryAlbumsTypeEnum = typeof GetUserLibraryAlbumsTypeEnum[keyof typeof GetUserLibraryAlbumsTypeEnum];
/**
 * @export
 */
export declare const GetUserLibraryAlbumsSortMethodEnum: {
    readonly AddedDate: "added_date";
    readonly Reposts: "reposts";
    readonly Saves: "saves";
};
export declare type GetUserLibraryAlbumsSortMethodEnum = typeof GetUserLibraryAlbumsSortMethodEnum[keyof typeof GetUserLibraryAlbumsSortMethodEnum];
/**
 * @export
 */
export declare const GetUserLibraryPlaylistsSortDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export declare type GetUserLibraryPlaylistsSortDirectionEnum = typeof GetUserLibraryPlaylistsSortDirectionEnum[keyof typeof GetUserLibraryPlaylistsSortDirectionEnum];
/**
 * @export
 */
export declare const GetUserLibraryPlaylistsTypeEnum: {
    readonly All: "all";
    readonly Repost: "repost";
    readonly Favorite: "favorite";
    readonly Purchase: "purchase";
};
export declare type GetUserLibraryPlaylistsTypeEnum = typeof GetUserLibraryPlaylistsTypeEnum[keyof typeof GetUserLibraryPlaylistsTypeEnum];
/**
 * @export
 */
export declare const GetUserLibraryPlaylistsSortMethodEnum: {
    readonly AddedDate: "added_date";
    readonly Reposts: "reposts";
    readonly Saves: "saves";
};
export declare type GetUserLibraryPlaylistsSortMethodEnum = typeof GetUserLibraryPlaylistsSortMethodEnum[keyof typeof GetUserLibraryPlaylistsSortMethodEnum];
/**
 * @export
 */
export declare const GetUserLibraryTracksSortMethodEnum: {
    readonly Title: "title";
    readonly ArtistName: "artist_name";
    readonly ReleaseDate: "release_date";
    readonly LastListenDate: "last_listen_date";
    readonly AddedDate: "added_date";
    readonly Plays: "plays";
    readonly Reposts: "reposts";
    readonly Saves: "saves";
    readonly MostListensByUser: "most_listens_by_user";
};
export declare type GetUserLibraryTracksSortMethodEnum = typeof GetUserLibraryTracksSortMethodEnum[keyof typeof GetUserLibraryTracksSortMethodEnum];
/**
 * @export
 */
export declare const GetUserLibraryTracksSortDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export declare type GetUserLibraryTracksSortDirectionEnum = typeof GetUserLibraryTracksSortDirectionEnum[keyof typeof GetUserLibraryTracksSortDirectionEnum];
/**
 * @export
 */
export declare const GetUserLibraryTracksTypeEnum: {
    readonly All: "all";
    readonly Repost: "repost";
    readonly Favorite: "favorite";
    readonly Purchase: "purchase";
};
export declare type GetUserLibraryTracksTypeEnum = typeof GetUserLibraryTracksTypeEnum[keyof typeof GetUserLibraryTracksTypeEnum];
/**
 * @export
 */
export declare const GetUsersTrackHistorySortMethodEnum: {
    readonly Title: "title";
    readonly ArtistName: "artist_name";
    readonly ReleaseDate: "release_date";
    readonly LastListenDate: "last_listen_date";
    readonly AddedDate: "added_date";
    readonly Plays: "plays";
    readonly Reposts: "reposts";
    readonly Saves: "saves";
    readonly MostListensByUser: "most_listens_by_user";
};
export declare type GetUsersTrackHistorySortMethodEnum = typeof GetUsersTrackHistorySortMethodEnum[keyof typeof GetUsersTrackHistorySortMethodEnum];
/**
 * @export
 */
export declare const GetUsersTrackHistorySortDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export declare type GetUsersTrackHistorySortDirectionEnum = typeof GetUsersTrackHistorySortDirectionEnum[keyof typeof GetUsersTrackHistorySortDirectionEnum];
