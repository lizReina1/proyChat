import type { AuthService, StorageService } from '../../services';
import { EntityManagerService, AdvancedOptions } from '../../services/EntityManager/types';
import { Configuration, UsersApi as GeneratedUsersApi } from '../generated/default';
import { FollowUserRequest, SubscribeToUserRequest, UpdateProfileRequest, UnfollowUserRequest, UnsubscribeFromUserRequest } from './types';
import type { LoggerService } from '../../services/Logger';
export declare class UsersApi extends GeneratedUsersApi {
    private readonly storage;
    private readonly entityManager;
    private readonly auth;
    private readonly logger;
    constructor(configuration: Configuration, storage: StorageService, entityManager: EntityManagerService, auth: AuthService, logger: LoggerService);
    /** @hidden
     * Update a user profile
     */
    updateProfile(params: UpdateProfileRequest, advancedOptions?: AdvancedOptions): Promise<Pick<import("web3-core").TransactionReceipt, "blockNumber" | "blockHash">>;
    /** @hidden
     * Follow a user
     */
    followUser(params: FollowUserRequest, advancedOptions?: AdvancedOptions): Promise<Pick<import("web3-core").TransactionReceipt, "blockNumber" | "blockHash">>;
    /** @hidden
     * Unfollow a user
     */
    unfollowUser(params: UnfollowUserRequest, advancedOptions?: AdvancedOptions): Promise<Pick<import("web3-core").TransactionReceipt, "blockNumber" | "blockHash">>;
    /** @hidden
     * Subscribe to a user
     */
    subscribeToUser(params: SubscribeToUserRequest, advancedOptions?: AdvancedOptions): Promise<Pick<import("web3-core").TransactionReceipt, "blockNumber" | "blockHash">>;
    /** @hidden
     * Unsubscribe from a user
     */
    unsubscribeFromUser(params: UnsubscribeFromUserRequest, advancedOptions?: AdvancedOptions): Promise<Pick<import("web3-core").TransactionReceipt, "blockNumber" | "blockHash">>;
}
