import type { UploadResponse } from '../../services/Storage/types';
import { BaseAPI } from '../generated/default';
import type { PlaylistTrackMetadata } from '../playlists/types';
export declare class TrackUploadHelper extends BaseAPI {
    generateId(type: 'track' | 'playlist'): Promise<number>;
    transformTrackUploadMetadata<TrackMetadata extends Pick<PlaylistTrackMetadata, 'isPremium' | 'isUnlisted' | 'fieldVisibility'>>(inputMetadata: TrackMetadata, userId: number): TrackMetadata & {
        ownerId: number;
    };
    populateTrackMetadataWithUploadResponse(trackMetadata: PlaylistTrackMetadata, audioResponse: UploadResponse, coverArtResponse: UploadResponse): {
        trackSegments: never[];
        trackCid: string | undefined;
        previewCid: string | undefined;
        audioUploadId: string;
        download: {
            cid: string | undefined;
            isDownloadable: boolean;
            requiresFollow: boolean;
        } | null | undefined;
        coverArtSizes: string;
        duration: number;
        title: string;
        description?: string | undefined;
        genre?: import("../..").Genre | null | undefined;
        isrc?: string | null | undefined;
        iswc?: string | null | undefined;
        license?: string | null | undefined;
        mood?: import("../..").Mood | null | undefined;
        tags?: string | undefined;
        aiAttributionUserId?: number | undefined;
        fieldVisibility?: {
            mood?: boolean | undefined;
            tags?: boolean | undefined;
            genre?: boolean | undefined;
            share?: boolean | undefined;
            playCount?: boolean | undefined;
            remixes?: boolean | undefined;
        } | undefined;
        isPremium?: boolean | undefined;
        isUnlisted?: boolean | undefined;
        premiumConditions?: {
            address: string;
            name: string;
            chain: "eth";
            standard: "ERC721" | "ERC1155";
            slug: string;
            imageUrl?: string | undefined;
            externalLink?: string | undefined;
        } | {
            address: string;
            name: string;
            chain: "sol";
            imageUrl?: string | undefined;
            externalLink?: string | undefined;
        } | {
            followUserId: number;
        } | {
            tipUserId: number;
        } | undefined;
        releaseDate?: Date | undefined;
        remixOf?: {
            tracks: {
                parentTrackId: number;
            }[];
        } | undefined;
        previewStartSeconds?: number | undefined;
    };
}
