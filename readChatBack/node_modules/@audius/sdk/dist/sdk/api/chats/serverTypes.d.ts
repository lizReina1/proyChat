export declare type ValidateCanChatRPC = {
    method: 'user.validate_can_chat';
    params: {
        receiver_user_ids: string[];
    };
};
export declare type ChatCreateRPC = {
    method: 'chat.create';
    params: {
        chat_id: string;
        invites: Array<{
            user_id: string;
            invite_code: string;
        }>;
    };
};
export declare type ChatDeleteRPC = {
    method: 'chat.delete';
    params: {
        chat_id: string;
    };
};
export declare type ChatInviteRPC = {
    method: 'chat.invite';
    params: {
        chat_id: string;
        invites: Array<{
            user_id: string;
            invite_code: string;
        }>;
    };
};
export declare type ChatMessageRPC = {
    method: 'chat.message';
    params: {
        chat_id: string;
        message_id: string;
        message: string;
        parent_message_id?: string;
    };
};
export declare type ChatReactRPC = {
    method: 'chat.react';
    params: {
        chat_id: string;
        message_id: string;
        reaction: string | null;
    };
};
export declare type ChatReadRPC = {
    method: 'chat.read';
    params: {
        chat_id: string;
    };
};
export declare type ChatBlockRPC = {
    method: 'chat.block';
    params: {
        user_id: string;
    };
};
export declare type ChatUnblockRPC = {
    method: 'chat.unblock';
    params: {
        user_id: string;
    };
};
export declare type ChatPermitRPC = {
    method: 'chat.permit';
    params: {
        permit: ChatPermission;
    };
};
export declare type RPCPayloadRequest = ChatCreateRPC | ChatDeleteRPC | ChatInviteRPC | ChatMessageRPC | ChatReactRPC | ChatReadRPC | ChatBlockRPC | ChatUnblockRPC | ChatPermitRPC | ValidateCanChatRPC;
export declare type RPCPayload = RPCPayloadRequest & {
    current_user_id: string;
    timestamp: number;
};
export declare type RPCMethod = RPCPayload['method'];
export declare type UserChat = {
    chat_id: string;
    last_message: string;
    last_message_at: string;
    chat_members: Array<{
        user_id: string;
    }>;
    recheck_permissions: boolean;
    invite_code: string;
    unread_message_count: number;
    last_read_at: string;
    cleared_history_at: string;
};
export declare type ChatMessageReaction = {
    user_id: string;
    created_at: string;
    reaction: string;
};
export declare type ChatMessageNullableReaction = ChatMessageReaction | {
    user_id: string;
    created_at: string;
    reaction: null;
};
export declare type ChatMessage = {
    message_id: string;
    sender_user_id: string;
    created_at: string;
    message: string;
    reactions: ChatMessageReaction[];
};
export declare type ChatInvite = {
    user_id: string;
    invite_code: string;
};
export declare type ValidatedChatPermissions = {
    user_id: string;
    permits: ChatPermission;
    current_user_has_permission: boolean;
};
/**
 * Defines who the user allows to message them
 */
export declare enum ChatPermission {
    /**
     * Messages are allowed for everyone
     */
    ALL = "all",
    /**
     * Messages are only allowed for users that have tipped me
     */
    TIPPERS = "tippers",
    /**
     * Messages are only allowed for users I follow
     */
    FOLLOWEES = "followees",
    /**
     * Messages are not allowed
     */
    NONE = "none"
}
export declare type CommsResponse = {
    health: {
        is_healthy: boolean;
    };
    summary?: {
        prev_cursor: string;
        prev_count: number;
        next_cursor: string;
        next_count: number;
        total_count: number;
    };
    data: any;
};
export declare type ChatWebsocketEventData = {
    rpc: RPCPayload;
    metadata: {
        userId: string;
        timestamp: string;
    };
};
