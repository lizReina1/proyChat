import type { TransactionReceipt } from 'web3-core';
import { EntityManagerConfig, EntityManagerService, ManageEntityOptions } from './types';
export declare class EntityManager implements EntityManagerService {
    /**
     * Configuration passed in by consumer (with defaults)
     */
    private readonly config;
    private readonly discoveryNodeSelector;
    private readonly contract;
    private readonly web3;
    private readonly logger;
    constructor(config: EntityManagerConfig);
    /**
     * Calls the manage entity method on chain to update some data
     */
    manageEntity({ userId, entityType, entityId, action, metadata, auth, confirmationTimeout, skipConfirmation }: ManageEntityOptions): Promise<Pick<TransactionReceipt, 'blockHash' | 'blockNumber'>>;
    /**
     * Confirms a write by polling for the block to be indexed by the selected
     * discovery node
     */
    confirmWrite({ blockHash, blockNumber, confirmationTimeout, confirmationPollingInterval }: {
        blockHash: string;
        blockNumber: number;
        confirmationTimeout?: number;
        confirmationPollingInterval?: number;
    }): Promise<boolean>;
    getCurrentBlock(): Promise<{
        timestamp: number;
    }>;
    getRelayEndpoint(): Promise<string>;
}
