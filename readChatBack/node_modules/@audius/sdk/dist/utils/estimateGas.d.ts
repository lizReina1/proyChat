import type Wallet from 'ethereumjs-wallet';
export interface ContractMethod {
    arguments: string[];
    estimateGas: (config: {
        from: Wallet | string | undefined;
        gas: number | undefined;
    }) => Promise<number>;
    _method: {
        name: string;
        inputs: Array<{
            type: string;
        }>;
    };
    encodeABI: () => string;
    send: <Tx>(config: {
        from: Wallet | string | undefined;
        gas: number;
        gasPrice?: number;
    }) => Tx;
}
interface EstimateGasConfig {
    method: ContractMethod;
    from?: Wallet | string;
    gasLimitMaximum: number;
    multiplier?: number;
}
/**
 * Returns estimated gas use for a txn for a contract method
 * @param options
 * @param options.method the contract method
 * @param options.from address the method will be sent from (required if the contract requires a certain sender, e.g. guardian)
 * @param options.gasLimitMaximum the maximum amount of gas we will allow
 * (likely will return a number much smaller than this)
 * @param options.multipler the multiplier to safe-guard against estimates that are too low
 */
export declare const estimateGas: ({ method, from, gasLimitMaximum, multiplier }: EstimateGasConfig) => Promise<number>;
export {};
