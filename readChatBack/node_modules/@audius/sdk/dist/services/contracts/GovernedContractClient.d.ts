import type { ContractABI, Logger } from '../../utils';
import type { GovernanceClient } from '../ethContracts/GovernanceClient';
import type { EthWeb3Manager } from '../ethWeb3Manager';
import type { Web3Manager } from '../web3Manager';
import type { GetRegistryAddress } from './ContractClient';
import { ContractClient } from './ContractClient';
/**
 * Contract class that extends a ContractClient and provides an interface
 * to retrieve governed methods that cannot be executed directly.
 */
export declare class GovernedContractClient extends ContractClient {
    governanceClient: GovernanceClient;
    constructor(web3Manager: Web3Manager | EthWeb3Manager, contractABI: ContractABI['abi'], contractRegistryKey: string, getRegistryAddress: GetRegistryAddress, governanceClient: GovernanceClient, logger?: Logger);
    /**
     * Gets a governed version of a method and allows a single transaction
     * to be sent to the governance client with the appropriate payload.
     * Similar to `getMethod`
     */
    getGovernedMethod(methodName: string, ...args: unknown[]): Promise<import("../../utils").ContractMethod>;
}
