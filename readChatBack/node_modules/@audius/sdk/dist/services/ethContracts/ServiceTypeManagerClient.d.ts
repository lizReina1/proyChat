/// <reference types="bn.js" />
import { GovernedContractClient } from '../contracts/GovernedContractClient';
export declare class ServiceTypeManagerClient extends GovernedContractClient {
    /**
     *
     * @param serviceType Type of service to set the version, either `discovery-node` or `content-node`
     * @param serviceVersion Version string to set on chain
     * @param privateKey Optional privateKey to pass along to web3Manager sendTransaction
     * @param dryRun Optional parameter to return the generated parameters without sending tx
     * @returns comma-separated String of serviceType and serviceVersion if dryRun; else response from web3Manager.sendTransaction
     */
    setServiceVersion(serviceType: string, serviceVersion: string, privateKey?: string | null, dryRun?: boolean): Promise<string | import("web3-core").TransactionReceipt>;
    addServiceType(serviceType: string, serviceTypeMin: string, serviceTypeMax: string, privateKey?: string | null): Promise<import("web3-core").TransactionReceipt>;
    getValidServiceTypes(): Promise<string[]>;
    getCurrentVersion(serviceType: string): Promise<string>;
    getVersion(serviceType: string, serviceTypeIndex: number): Promise<string>;
    getNumberOfVersions(serviceType: string): Promise<number>;
    /**
     * @notice Add a new service type
     * @returns {
     *  isValid: Is the types type is isValid
     *  minStake: minimum stake for service type
     *  maxStake: minimum stake for service type
     * }
     */
    getServiceTypeInfo(serviceType: string): Promise<{
        isValid: any;
        minStake: import("bn.js");
        maxStake: import("bn.js");
    }>;
}
