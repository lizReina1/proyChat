import { GovernedContractClient } from '../contracts/GovernedContractClient';
export declare class TrustedNotifierManagerClient extends GovernedContractClient {
    /**
     * Register Trusted Notifier with specified fields (wallet, endpoint, email)
     * @notice Only callable by Governance contract
     * @notice All fields must be unique and non-falsey
     * @notice New Trusted Notifier is assigned an auto-incremented integer ID
     * @returns Newly assigned integer ID
     */
    registerNotifier(wallet: string, endpoint: string, email: string, privateKey?: string | null): Promise<import("web3-core").TransactionReceipt>;
    /**
     * Deregister Trusted Notifier associated with wallet
     * @notice Only callable by Governance contract or wallet
     * @returns ID of deregistered Trusted Notifier
     */
    deregisterNotifier(wallet: string, privateKey?: string | null): Promise<import("web3-core").TransactionReceipt>;
    getLatestNotifierID(): Promise<number>;
    /**
     * Returns all TrustedNotifier info associated with ID
     */
    getNotifierForID(ID: string): Promise<{
        wallet: any;
        endpoint: any;
        email: any;
    }>;
    /**
     * Returns all TrustedNotifier info associated with wallet
     */
    getNotifierForWallet(wallet: string): Promise<{
        ID: any;
        endpoint: any;
        email: any;
    }>;
    /**
     * Returns all TrustedNotifier info associated with endpoint
     */
    getNotifierForEndpoint(endpoint: string): Promise<{
        ID: any;
        wallet: any;
        email: any;
    }>;
    /**
     * Returns all TrustedNotifier info associated with email
     */
    getNotifierForEmail(email: string): Promise<{
        ID: any;
        wallet: any;
        endpoint: any;
    }>;
}
